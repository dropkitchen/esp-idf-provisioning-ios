// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: prov_pop.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum ProvPopStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case provPopSuccess // = 0
  case provPopFail // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .provPopSuccess
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .provPopSuccess
    case 1: self = .provPopFail
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .provPopSuccess: return 0
    case .provPopFail: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProvPopStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProvPopStatus] = [
    .provPopSuccess,
    .provPopFail,
  ]
}

#endif  // swift(>=4.2)

enum ProvPopFailedReason: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case `internal` // = 0
  case userIDNotValid // = 1
  case timestampNotValid // = 2
  case missingParameters // = 3
  case tooManyRequests // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .internal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internal
    case 1: self = .userIDNotValid
    case 2: self = .timestampNotValid
    case 3: self = .missingParameters
    case 4: self = .tooManyRequests
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .internal: return 0
    case .userIDNotValid: return 1
    case .timestampNotValid: return 2
    case .missingParameters: return 3
    case .tooManyRequests: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProvPopFailedReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProvPopFailedReason] = [
    .internal,
    .userIDNotValid,
    .timestampNotValid,
    .missingParameters,
    .tooManyRequests
  ]
}

#endif  // swift(>=4.2)

enum ProvPopMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeRespGetPop // = 0
  case typeCmdGetPop // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .typeRespGetPop
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeRespGetPop
    case 1: self = .typeCmdGetPop
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeRespGetPop: return 0
    case .typeCmdGetPop: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension ProvPopMsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProvPopMsgType] = [
    .typeRespGetPop,
    .typeCmdGetPop,
  ]
}

#endif  // swift(>=4.2)

struct ProvPopCmdGetPop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: UInt32 = 0

  var timestamp: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProvPopRespGetPop {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: ProvPopStatus = .provPopSuccess

  var failReason: ProvPopFailedReason = .internal

  var nativeID: Data = SwiftProtobuf.Internal.emptyData

  var pop: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct ProvPopPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msg: ProvPopMsgType = .typeRespGetPop

  var payload: ProvPopPayload.OneOf_Payload? = nil

  var cmdGetPop: ProvPopCmdGetPop {
    get {
      if case .cmdGetPop(let v)? = payload {return v}
      return ProvPopCmdGetPop()
    }
    set {payload = .cmdGetPop(newValue)}
  }

  var respGetPop: ProvPopRespGetPop {
    get {
      if case .respGetPop(let v)? = payload {return v}
      return ProvPopRespGetPop()
    }
    set {payload = .respGetPop(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case cmdGetPop(ProvPopCmdGetPop)
    case respGetPop(ProvPopRespGetPop)

  #if !swift(>=4.1)
    static func ==(lhs: ProvPopPayload.OneOf_Payload, rhs: ProvPopPayload.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.cmdGetPop(let l), .cmdGetPop(let r)): return l == r
      case (.respGetPop(let l), .respGetPop(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProvPopStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ProvPopSuccess"),
    1: .same(proto: "ProvPopFail"),
  ]
}

extension ProvPopFailedReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Internal"),
    1: .same(proto: "UserIdNotValid"),
    2: .same(proto: "TimestampNotValid"),
    3: .same(proto: "MissingParameters"),
    4: .same(proto: "TooManyRequests"),
  ]
}

extension ProvPopMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TypeRespGetPop"),
    1: .same(proto: "TypeCmdGetPop"),
  ]
}

extension ProvPopCmdGetPop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProvPopCmdGetPop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.userID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.timestamp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt32Field(value: self.userID, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt32Field(value: self.timestamp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProvPopCmdGetPop, rhs: ProvPopCmdGetPop) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProvPopRespGetPop: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProvPopRespGetPop"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .standard(proto: "fail_reason"),
    3: .standard(proto: "native_id"),
    4: .same(proto: "pop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularEnumField(value: &self.failReason)
      case 3: try decoder.decodeSingularBytesField(value: &self.nativeID)
      case 4: try decoder.decodeSingularBytesField(value: &self.pop)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .provPopSuccess {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.failReason != .internal {
      try visitor.visitSingularEnumField(value: self.failReason, fieldNumber: 2)
    }
    if !self.nativeID.isEmpty {
      try visitor.visitSingularBytesField(value: self.nativeID, fieldNumber: 3)
    }
    if !self.pop.isEmpty {
      try visitor.visitSingularBytesField(value: self.pop, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProvPopRespGetPop, rhs: ProvPopRespGetPop) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.failReason != rhs.failReason {return false}
    if lhs.nativeID != rhs.nativeID {return false}
    if lhs.pop != rhs.pop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProvPopPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProvPopPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    10: .standard(proto: "cmd_get_pop"),
    11: .standard(proto: "resp_get_pop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.msg)
      case 10:
        var v: ProvPopCmdGetPop?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .cmdGetPop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .cmdGetPop(v)}
      case 11:
        var v: ProvPopRespGetPop?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .respGetPop(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .respGetPop(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.msg != .typeRespGetPop {
      try visitor.visitSingularEnumField(value: self.msg, fieldNumber: 1)
    }
    switch self.payload {
    case .cmdGetPop(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    case .respGetPop(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProvPopPayload, rhs: ProvPopPayload) -> Bool {
    if lhs.msg != rhs.msg {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
